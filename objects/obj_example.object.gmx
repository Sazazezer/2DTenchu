<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Small Tutorial

// At first, we must init. the global item script.

item_int();

//Then put here global inventory init, slot width and slot height:

inventory_int(7,1);


//Just a variable value, ignore this:

last_stack = 0
last_slot = 0
last_id_item = 0
   
current_stack = 0
current_slot = 0
current_id_item = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if keyboard_check_pressed(ord("Q")){
    //Just add random items to inventory, if the inventory is full, 
    //you'll get return the remaining stack
   var stack_remain;
   stack_remain = inventory_item_add(irandom_range(0, 50),16)
   show_debug_message("Remaining Stack: " + string(stack_remain))
   
}

if keyboard_check_pressed(ord("W")){
   //Clear the inventory
   inventory_clear();
   show_message("Inventory was cleared");
}

if keyboard_check_pressed(ord("E")){
   //Save the inventory, the best, the save file are unreadable.
   inventory_save(working_directory + "\inventory.dat");
   show_message("Inventory was saved");
}

if keyboard_check_pressed(ord("R")){
   //Load the inventory
   inventory_load(working_directory + "\inventory.dat");
   show_message("Inventory was loaded");
}

if keyboard_check_pressed(ord("T")){
   //Sorting inventory, typ -&gt; 0 = 1. 2. 3. (from ID) | 1 = A. B. C. | 2 = biggest Stack
   //Reserve Sorting -&gt; false|true
   inventory_sort(0,false);
   show_message("Inventory was sorted");
}

if keyboard_check_pressed(ord("Y")){
   //Clear a Item completyYy
   inventory_item_clear(inventory_last_select());
   show_message("Selected Item was cleared");
}

if keyboard_check_pressed(ord("U")){
   //Delete a Item by stack amounut
   inventory_item_delete(inventory_last_select(),1);
   show_message("Selected Item was deleted (1 Amount less)");
}

if keyboard_check_pressed(ord("I")){
   //Drop a Item (object is needed);
   inventory_item_drop(inventory_last_select(),1,view_wview[0]-64+random(48),view_hview[0]/2-random(64)+random(64),obj_drop);
   //show_message("Selected Item was dropped");
}

if keyboard_check_pressed(ord("O")){
   //Find a Item from Inventory
   var amount;
   amount = inventory_item_find(34) //search ID 34 - Leaf, return of amount the item.
   show_message("Amount founded Item: " + string(amount));
}

if keyboard_check_pressed(ord("P")){
   //Use a Item, return: &lt;true|false&gt; (true if they have special effects, false not)
   var has_script;
   has_script = inventory_item_use(inventory_last_select());
}

if keyboard_check_pressed(ord("A")){
   //Exchange the Inventory Slot
   inventory_item_exchange(inventory_select(),inventory_last_select());
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Now you can draw Inventory here:

//draw_panel(spr_background,0,5,5,view_wview[0]-10,view_hview[0]-10,32)

//draw_text(270,40,"Key Q: Add random Item#Key W: Clear Inventory#Key E: Save Inventory#Key R: Load Inventory#Key T: Sort Inventory#Key Y: Clear a Item from Selecting Slot#Key U: Delete Item by Stack Amount#Key I: Drop a Item#Key O: Find Item on Inventory#Key P: Run the script of item with effect#Key A: Exchange Items from #       'ItemOverMouse' to Selecting");


//draw_text(60,80,"Inventory");
inventory_draw(view_xport[0]+20, view_yport[0]+100,spr_slot, spr_slot,10,c_white);



var id_last = inventory_read("ID",inventory_last_select());


//Read the script "item_int" for more information for item_id_read

if inventory_last_select() &gt;= 0 and inventory_read("ID",inventory_last_select()) != -1{
draw_text(60+70,250,
"#Selected Item Name: " + string(item_id_read(id_last,0)) +
"#Selected Item Stack: " + string(inventory_read("Stack",inventory_last_select())) + " / " + string(item_id_read(id_last,1)) +
"#Selected Item Description: " + string(item_id_read(id_last,5))
);

draw_sprite_ext(item_id_read(id_last,2),image_index,60,250,4,4,0,c_white,1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
