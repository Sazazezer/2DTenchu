<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxOfEachObjectiveType=6;
yOffset=10;
var currentMission = GetCurrentMission();
show_debug_message(currentMission);
FillInMissionGaps();
GetMissionObjectives(currentMission);

//** How Objectives work**//

/*
    The control object creates the base for the objectives and draws them. 
    Because objectives are updated by the world around them i believe a modular apporach isn't the best
    Events that occur through the levels should update the appriorate mission
    Individual level objects will determine if local and global objectives are complete
    This mindset may change as the levels are actually made
    
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_f2)){

yOffset=10;


        draw_text(view_xview[0]+10,view_yview[0]+yOffset,string("Primary Objectives"));
        yOffset=yOffset+10;
    for(i=0;i&lt;maxOfEachObjectiveType;i++){
        if (primaryMission[i]!="") {
            draw_text(view_xview[0]+20,view_yview[0]+yOffset,string(primaryMission[i]));
            yOffset=yOffset+10;
        }
    }

        draw_text(view_xview[0]+10,view_yview[0]+yOffset,string("Secondary Objectives"));
        yOffset=yOffset+10;
    for(j=0;j&lt;maxOfEachObjectiveType;j++){

        if (secondaryMission[j]!="") {
            draw_text(view_xview[0]+20,view_yview[0]+yOffset,string(secondaryMission[j]));
            yOffset=yOffset+10;
        }
    }

        draw_text(view_xview[0]+10,view_yview[0]+yOffset,string("Hidden Objectives"));
        yOffset=yOffset+10;

    for(k=0;k&lt;maxOfEachObjectiveType;k++){

        if (hiddenMission[k]!="") {
            draw_text(view_xview[0]+20,view_yview[0]+yOffset,string(hiddenMission[k]));
            yOffset=yOffset+10;
        }
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
