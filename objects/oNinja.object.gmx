<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCultist</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lurkSpeed=0;
wanderSpeed = 1;
patrolSpeed = 2;
chaseSpeed = 3;
searchSpeed = 2;
ResetShunts()

state = "Idle";
lastKnownPositionX = 0;
lastKnownPositionY = 0;
startPointX = x;
startPointY = y;
startingDirection=direction;
startingSpeed=speed;
searching=false;
paranoia=10;
doIActivate=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        MySword = instance_create(x,y,oEnemySword);
        MySword.direction=image_angle;
        MySword.image_angle=MySword.direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = point_direction(x,y,lastKnownPositionX+(choose(-50,0,50)),lastKnownPositionY+(choose(-50,0,50)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "Searching";
/*
         if (distance_to_point(lastKnownPositionX, lastKnownPositionY))  &gt; 10 {
         speed = chaseSpeed;
         direction = point_direction(x,y,lastKnownPositionX,lastKnownPositionY);
         doIActivate=2; //for testing, yes it does, and it stays there too
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state="Idle";
speed=choose(0,startingSpeed);
direction=startingDirection;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>searching = false;
state="HeadHome";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;

/*bounce off wall*/

if y &lt; 0 || y &gt; room_height {
    vspeed = vspeed * -1;
    }
    
if x &lt; 0 || x &gt; room_width {
    hspeed = hspeed * -1;
    }
    
/*collisions*/
/*
if hspeed!=0 {
    if !place_free(x+hspeed,y) {
        if hspeed &gt;0 {
            move_contact_solid(0,hspeed);
            }
        if hspeed &lt;0 {
            move_contact_solid(180,-hspeed);
            }
            hspeed = 0;
    }

}

if vspeed!=0 {
    if !place_free(x+hspeed,y+vspeed) {
        if vspeed &gt;0 {
            move_contact_solid(270,vspeed);
            }
        if vspeed &lt;0 {
            move_contact_solid(90,-vspeed);
            }
            vspeed = 0;
    }

}*/
EnemyCollisionWithSolids()

/* Some ai stuff */
if state = "Idle" {

   // sprite_index = 
    speed = patrolSpeed;
    testForAlert();
    
} else if state = "Alert" {

    //sprite_index = 
    
    if IHaveLineOfSightTo(oPlayer) {
        //Go towards him
        speed = chaseSpeed;
        direction = point_direction(x,y,oPlayer.x,oPlayer.y);
        //if near player
        if (distance_to_object(oPlayer)=5){
            if alarm[4] ==-1 {
            alarm[4]=room_speed*0.125;
            }
        }
    } else {
        lastKnownPositionX = oPlayer.x;
        lastKnownPositionY = oPlayer.y;
        state = "RuntoLastPoint";
        
    }
        
} 

if state = "RuntoLastPoint" {
        if alarm[2]==-1{
            alarm[2]=room_speed*2;
        }
        testForAlert();
        if (distance_to_point(lastKnownPositionX, lastKnownPositionY) &lt; 10) {
                state = "Searching";
                } else {                
                speed = chaseSpeed;
                direction = point_direction(x,y,lastKnownPositionX,lastKnownPositionY);
            }
            }

            
if (state = "Searching") {
        if (alarm[0]==-1){
                alarm[0]=(room_speed*10)+paranoia;
        }
        searching = true;
        testForAlert();
        speed = searchSpeed;
        if (alarm[3]==-1){
            alarm[3]=room_speed*3;
        }
    }

 if (state = "HeadHome") {
        testForAlert();
        if (alarm[1]==-1){
                alarm[1]=(room_speed*10);
        }
        speed = searchSpeed;
        direction = point_direction(x,y,startPointX,startPointY);
        if (distance_to_point(startPointX,startPointY)&lt;10) {
        state="Idle"
        speed=choose(startingSpeed,startingSpeed,0);
        direction=startingDirection;
        }       
        
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oTeleport">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other){
TeleportScript(newX,newY,oEnemy);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with oPlayer {
if (oPlayer.depth==depth &amp;&amp; oPlayer.grappling==false){
    speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &lt; oWall.y || y &gt; oWall.y {
    vspeed = vspeed * -1;
    }
if x &lt; oWall.x || x &gt; oWall.x {
    hspeed = hspeed * -1;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(x+10,y+10,state);


 
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
